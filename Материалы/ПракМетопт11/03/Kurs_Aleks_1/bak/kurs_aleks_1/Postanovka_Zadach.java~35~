package kurs_aleks_1;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import javax.swing.*;

/**
 * <p>Title: Курсовая работа по Методам оптимизации</p>
 * <p>Description: Метод Маркварда</p>
 * <p>Copyright: Copyright (c) 2006</p>
 * <p>Company: Кафедра Прикладной Математики и Информатики </p>
 * @author sashka_draakon@mail.ru or polushin_an@mail.ru
 * @version 11.0
 */

public class Postanovka_Zadach extends JApplet {
  private boolean isStandalone = false;
  JTabbedPane jTabbedPane1 = new JTabbedPane();
  JScrollPane jScrollPane1 = new JScrollPane();
  Panel_post jPanel_post = new Panel_post();
 int flag=0;
 Panel_Autor jPanel_Autor = new Panel_Autor();

   //Panel_post jPanel_post = new Panel_post();
  //Get a parameter value
  public String getParameter(String key, String def) {
    return isStandalone ? System.getProperty(key, def) :
      (getParameter(key) != null ? getParameter(key) : def);
  }

  //Construct the applet
  public Postanovka_Zadach() {
  }

  //Initialize the applet
  public void init() {
    try {
      jbInit();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  //Component initialization
  private void jbInit() throws Exception {
    jTabbedPane1.setBackground(Color.pink);
    jTabbedPane1.setToolTipText("Постановка задачи");
   // jTabbedPane1.setBackground(UIManager.getColor("TabbedPane.shadow"));
    //jTabbedPane1.setToolTipText("");
  // jTabbedPane1.add(jPanel_Algoritm,  "Алгоритм");
    this.setSize(new Dimension(720,600));

    jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPane1.getViewport().setBackground(SystemColor.inactiveCaptionText);
    jScrollPane1.setDebugGraphicsOptions(0);
   jScrollPane1.setBounds(new Rectangle(0, 0, 695, 615));
   jScrollPane1.setBorder(BorderFactory.createLoweredBevelBorder());

     jPanel_post.setPreferredSize(new Dimension(930,990));
     jPanel_post.setLayout(null);
    jPanel_post.setBackground(Color.white);
    jPanel_post.setToolTipText("Постановка задачи");

    jPanel_Autor.setPreferredSize(new Dimension(720,300));
    jPanel_Autor.setLayout(null);
   // jPanel_Autor.setBackground(Color.white);
    jPanel_Autor.setBackground(new Color(247, 247, 255));

    this.getContentPane().add(jTabbedPane1, BorderLayout.CENTER);

    jTabbedPane1.add(jScrollPane1,"Постановка задачи");
    jScrollPane1.getViewport().add(jPanel_Autor, null);
    jTabbedPane1.add( jPanel_Autor,"О программе");
    jScrollPane1.getViewport().add(jPanel_post, null);


 }

  //Start the applet
  public void start() {
  }

  //Stop the applet
  public void stop() {
  }

  //Destroy the applet
  public void destroy() {
  }

  //Get Applet information
  public String getAppletInfo() {
    return "Applet Information";
  }

  //Get parameter info
  public String[][] getParameterInfo() {
    return null;
  }

  class  Panel_Autor extends JPanel {
      public void paintComponent(Graphics  resh) {
        super.paintComponent( resh);
        resh.setColor(new Color(60, 0, 60));
   resh.setFont(new java.awt.Font("Dialog", 1, 20));
   resh.drawString("Автор программы - студент ПМ - 43 Полушин Александр. ",40,35);
   resh.drawString("Постановка задачи - профессор Ижуткин Виктор Сергеевич. ",40,65);
   resh.drawString("Консультант по программированию - Токтарова Вера Ивановна. ",40,95);

      }
    }


 class  Panel_post extends JPanel {
      public void paintComponent(Graphics  resh) {
        super.paintComponent( resh);
        My_Stringer.setGraphics(resh);
        resh.setColor(new Color(0, 0, 80));
    My_Stringer.setGraphics(resh);
    resh.setColor(new Color(180, 0, 60));
    resh.setFont(new java.awt.Font("Dialog", 1, 30));
    resh.drawString("Метод Марквардта [Marquardt D.M.] ",60,35);
     resh.setColor(Color.black);
    resh.setFont(new java.awt.Font("Dialog", 1, 12));
    resh.drawString("Метод Марквардта - это численный метод второго порядка поиска безусловного экстремума.",50,60);
    resh.setFont(new java.awt.Font("Dialog", 1, 16));
    resh.drawString("Постановка задачи: ",220,80);
    resh.setFont(new java.awt.Font("Dialog", 1, 12));
     My_Stringer.drawString("Пусть дана функция f(x), ограниченная снизу на множестве R^{n} и имеющая непрерывные частные",40,95);
    resh.drawString("производные во всех его точках. ",30,110);
     My_Stringer.drawString("Требуется найти локальный минимум функции f(x) на множестве допустимых решений Х = R^{n}, ",40,125);
     My_Stringer.drawString("то есть найти такую точку  x^{*} \u2208 R^{n}, что f(x^{*}) = min f(x), где f(x) \u2208 C^{2}.  ",30,140);
    resh.setFont(new java.awt.Font("Dialog", 1, 16));
     resh.drawString("Стратегия поиска: ",220,160);
   resh.setFont(new java.awt.Font("Dialog", 1, 12));
    My_Stringer.drawString("Стратегия метода Марквардта состоит в построении последовательности точек x^{k}, k = 0,1,2,..., таких,",40,175);
   My_Stringer.drawString("что f(x^{k+1}) < f(x^{k}), k = 0,1,2,... . ",30,190);
 My_Stringer.drawString("Точки последовательности  x^{k} вычисляются по правилу",40,205);
   My_Stringer.drawString("x^{k+1} = x^{k} - [H(x^{k}) + \u03BC^{k}*E]^{-1} * \u2207f(x^{k}), k = 0,1,2,... ,                     (1) ",100,220);
 My_Stringer.drawString("где точка x^{0} задаётся пользователем, Е - единичная матрица,  \u03BC^{k} - последовательность положительных ",30,235);
  My_Stringer.drawString("чисел, таких, что матрица [H(x^{k}) +  \u03BC^{k}*E]^{-1} положительно определена.",30,250);
  My_Stringer.drawString("Как правило, число  \u03BC^{0} назначается как минимум на порядок больше, чем самый большой элемент матрицы H(x^{0}),",40,265);
 My_Stringer.drawString("а в ряде стандартных программ полагается  \u03BC^{0} = 10^{4}.",30,280);
  My_Stringer.drawString("Если f( x^{k} - [H(x^{k}) +  \u03BC^{k}*E]^{-1} * \u2207f(x^{k}) < f(x^{k}), то \u03BC^{k+1} = \u03BC^{k}/2.",40,295);
 My_Stringer.drawString("В противном случае \u03BC^{k+1} = 2*\u03BC^{k}.",30,310);
    My_Stringer.drawString("Легко видеть, что алгоритм Марквардта в зависимости от величины \u03BC^{k} на каждом шаге по своим свойствам либо",40,325);
 My_Stringer.drawString("принадлежит к алгоритму Ньютона, либо к алгоритму градиентного спуска.",30,340);
  My_Stringer.drawString("Построение последовательности x^{k} заканчивается, когда либо \u2225\u2207f(x^{k})\u2225 < \u03B5_{1}, либо число итераций k >= M, где",40,355);
   My_Stringer.drawString("\u03B5_{1} - малое положительное число, а M - предельное число итераций.",30,370);
    My_Stringer.drawString("Вопрос о том, может ли точка х^{k} рассматриваться как найденное приближение искомой точки минимума, решается",40,385);
   My_Stringer.drawString("путём проведения дополнительного исследования.",30,400);
      resh.setFont(new java.awt.Font("Dialog", 1, 16));
    resh.drawString("Процедура решения задачи:",200,430);
     resh.setFont(new java.awt.Font("Dialog", 1, 12));
      My_Stringer.drawString("1. Используя алгоритм Марквардта, нужно построить точку x^{k}, в которой выполняется по крайней мере один",40,445);
 resh.drawString(" критерий окончания расчётов.",30,460);
  My_Stringer.drawString("2. Так как f(x) C^{2}, то нужно осуществить проверку выполнения достаточных условий минимума H(x^{k}) > 0. ",40,475);
My_Stringer.drawString("Если условие выполнено, то точка x^{k} может рассматриваться как найденное приближение точки минимума x^{*}. ",30,490);
My_Stringer.drawString("Проверку выполнения достаточных условий минимума можно заменить проверкой функции f(x) на выпуклость. ",40,505);
resh.setFont(new java.awt.Font("Dialog", 1, 16));
    resh.drawString("Замечания:",220,530);
resh.setFont(new java.awt.Font("Dialog", 1, 12));
 My_Stringer.drawString("1. Метод Марквардта за счёт выбора \u03BC^{k} обеспечивает построение последовательности х^{k},",30,545);
My_Stringer.drawString("такой, что f(x^{k+1}) < f(x^{k}), k = 0,1,2,... .",40,560);
My_Stringer.drawString("2. В окрестности точки минимума x^{*} метод Марквардта обладает скоростью сходимости, близкой к квадратичной.",30,575);
resh.setFont(new java.awt.Font("Dialog", 1, 13));
resh.setColor(Color.red);
resh.drawString("Утверждение:",50,590);
resh.setFont(new java.awt.Font("Dialog", 1, 12));
resh.setColor(Color.black);
My_Stringer.drawString("Пусть f(x) дважды непрерывно дифференцируемая сильно выпуклая функция с константой l>0  на R^{n} и удовлетворяет условию",40,605);
My_Stringer.drawString("\u2225 H(x) - H(y) \u2225 \u2264 L\u2225 x - y \u2225   x,y \u2208 R^{n},  ",50,620);
 My_Stringer.drawString("где L > 0, а начальная точка такова, что \u2225\u2207f(x^{0})\u2225 < (8*l^{2})/L, то есть  \u2225\u2207f(x^{0})\u2225 = (8*l^{2}*q)/L, где q \u2208 (0,1). ",40,635);
 My_Stringer.drawString(" Тогда последовательность x^{k} сходится к точке минимума с квадратичной скоростью \u2225 x^{k} - x^{*}\u2225  \u2264 (4*l^{2}*(q^{2})^{k})/L .",40,650);
resh.setFont(new java.awt.Font("Dialog", 1, 16));
resh.setColor(Color.black);
resh.drawString("Дополнительные сведения:",200,665);
resh.setFont(new java.awt.Font("Dialog", 1, 12));
resh .drawString("Метод Марквардта является комбинацией метода Коши и метода Ньютона, в которой удачно сочетаются положительные свойства обоих методов. ",40,680);
resh .drawString("Вместе с тем при использовании метода Марквардта требуется информация о значениях вторых производных целевой функции. ",30,695);
resh .drawString("На начальных итерациях этого метода происходит движение в направлении, противоположном градиенту, как в методе Коши.",40,710);
resh .drawString("На заключительных итерациях осуществляется эффективный поиск в окрестности точки минимума по методу Ньютона.",30,725);
resh .drawString("Метод Марквардта характеризуется относительной простотой, свойством убывания целевой функции при переходе от итерации к итерации, ",40,740);
resh .drawString("высокой скоростью сходимости в окрестностях точки минимума, а также отсутствием процедуры поиска вдоль прямой.  ",30,755);
resh .drawString("Главным недостатком метода является необходимость обращения матрицы Гессе.  ",40,770);
resh .drawString("Метод Маркварда широко используется при решении задач, целевая функция которых записывается в виде суммы квадратов.",30,785);
resh.setColor(Color.red);
resh.setFont(new java.awt.Font("Dialog", 1, 16));
resh.drawString("Домашнее задание по усвоению данного метода:",160,810);
resh.setColor(Color.black);
resh.setFont(new java.awt.Font("Dialog", 1, 12));
resh.drawString("",30,825);
My_Stringer.drawString("1. После десяти итераций по методу Марквардта при решении задачи f(x) = (x_{1} - (x_{2})^{2})^{2} + (1 - x_{1})^{2} \u2192 min ",30,840);
My_Stringer.drawString("программа остановилось в точке x = (1;1)^{T}. Пояснить причину остановки. ",40,855);
My_Stringer.drawString("2. Решить задачу f(x) = 4*(x_{1} - 5)^{2} + (x_{2} - 6)^{2} \u2192 min методом Марквардта из точки x^{0} = (8,9)^{T}, \u03BC^{0} = 20; \u03B5_{1} = 0.1 .  ",30,870);
My_Stringer.drawString("3. Решить задачу f(x) = ((x_{1})^{2} + x_{2} - 11)^{2} + (x_{1} + (x_{2})^{2} - 7)^{2} \u2192 min методом Марквардта из точки x^{0} = (0,0)^{T}, \u03BC^{0} = 120; \u03B5_{1} = 0.1 .  ",30,885);
resh.setFont(new java.awt.Font("Dialog", 1, 16));
resh.setColor(Color.red);
resh.drawString("Желаем успехов в учёбе !",200,930);
     }
    }

      //Main method
  public static void main(String[] args) {
    Postanovka_Zadach applet = new Postanovka_Zadach();
    applet.isStandalone = true;
    JFrame frame = new JFrame();
    //EXIT_ON_CLOSE == 3
    frame.setDefaultCloseOperation(3);
    frame.setTitle("Applet Frame");
    frame.getContentPane().add(applet, BorderLayout.CENTER);
    applet.init();
    applet.start();
    frame.setSize(720,620);
    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
    frame.setLocation((d.width - frame.getSize().width) / 2, (d.height - frame.getSize().height) / 2);
    frame.setVisible(true);
  }

  //static initializer for setting look & feel
  static {
    try {
      //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
    }
    catch(Exception e) {
    }
  }
}
