package sravnenie;
import java.text.*;

public class QuadFuncs implements FunctionContainers {
        static NumberFormat nf = NumberFormat.getInstance();
        public double a = 0.0;
        public double b = 0.0;
        public double c = 0.0;
        public double d = 0.0;
        public double x1 = 0.0;
        public double x2 = 0.0;
         public double eps1 = 0.01;
        public double eps2 = 0.02;
        public boolean is2;

        public int k ;

        public QuadFuncs() {nf.setMaximumFractionDigits(3);}
        public QuadFuncs(double a, double b, double c, double d, boolean is2) {
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.is2 = is2;
                nf.setMaximumFractionDigits(3);
        }
        public void setx1x2(double x1, double x2) {
                this.x1 = x1;
                this.x2 = x2;
        }

        public void seteps1eps2(double eps1, double eps2) {
                this.eps1 = eps1;
                this.eps2 = eps2;
        }
        public String normalize(double d) {
                d = (int)(d*100000)*1./100000;
                String s;
                if(d == (int)d) {s = String.valueOf((int)d);return s;}
                else s = String.valueOf(d);
                if(s.length() <= 1) return s;
                while (s.charAt(s.length() - 1) == '0'){
                  s = s.substring(0, s.length() - 1);
                }
                return s;
        }
        public double g1() {
                double r = 1 - 0.75*Math.cos(1.5*x1) - 0.25*Math.cos(x1/2);//0.75
                if(x1 < 0) r = -r;
                return r;
        }
        public double g2() {
                double r = 1 - 0.75*Math.cos(1.5*x2) - 0.25*Math.cos(x2/2);//0.75
                if(x1 < 0) r = -r;
                return r;
        }


        public double gNorm() {
                double gr1 = g1();
                double gr2 = g2();
                return Math.sqrt(gr1*gr1 + gr2*gr2);
        }


        public double[][] h() {
                double[][] matrix = new double[2][2];
                matrix[0][0] = 1.125*Math.sin(1.5*x1) + 0.125*Math.sin(x1/2);//12 * a * (x1 + b) * (x1 + b);
                matrix[0][1] = 0;
                matrix[1][0] = 0;
                matrix[1][1] = 1.125*Math.sin(1.5*x2) + 0.125*Math.sin(x2/2);//12 * c * (x2 + d) * (x2 + d);
                return matrix;
        }


        public double[][] h_1() {
                double[][] matrix = new double[2][2];
                double m = 1.0/ ((1.125*Math.sin(1.5*x1) + 0.125*Math.sin(x1/2)) * (1.125*Math.sin(1.5*x2) + 0.125*Math.sin(x2/2)));
                matrix[0][0] = (1.125*Math.sin(1.5*x2) + 0.125*Math.sin(x2/2));//m * 12 * c * (x2 + d) * (x2 + d);
                matrix[0][1] = 0;
                matrix[1][0] = 0;
                matrix[1][1] = (1.125*Math.sin(1.5*x1) + 0.125*Math.sin(x1/2));//m * 12 * a * (x1 + b) * (x1 + b);
                return matrix;
        }




        public double d1() {
                double[][] h = h_1();
                return - h[0][0] * g1() - h[0][1] * g2();
        }
        public double d2() {
                double[][] h = h_1();
                return - h[1][0] * g1() - h[1][1] * g2();
        }



        public double x1New() {
                if(!is2)
                        return x1 + d1();
                else return x1 + step()*d1();
        }
        public double x2New() {
                if(!is2)
                        return x2 + d2();
                else return x2 + step()*d2();
        }
        public double dxNorm() {
                double a = x1New() - x1;
                double b = x2New() - x2;
                return Math.sqrt(a*a + b*b);
        }
        public double dFuncNorm() {
                double a = func(x1New(), x2New());
                double b = func();
                return Math.abs(a - b);
        }
        public double func() {
                return Math.abs(x1 - Math.sin(x1)*Math.cos(x1)) + Math.abs(x2 - Math.sin(x2)*Math.cos(x2));
        }
        public double func(double x1, double x2) {
                return Math.abs(x1 - Math.sin(x1)*Math.cos(x1)) + Math.abs(x2 - Math.sin(x2)*Math.cos(x2));
        }


        public double step() {
                if(x1 != 4) return 195;
                return 2.159;
        }
        public String stepStr() {
                return normalize(step());
        }
        public String gradientStr() {
                String bs = b > 0 ? " + " + b : " - " + (-b);
                String ds = d > 0 ? " + " + d : " - " + (-d);
                return "#{1 - 0.75\u00b7cos 1.5x_{1} - 0.25\u00b7cos 0.5x_{1}}{1 - 0.75\u00b7cos 1.5x_{2} - 0.25\u00b7cos 0.5x_{2}}";
        }
        public String g1Str() {
                return normalize(g1());
        }
        public String g2Str() {
                return normalize(g2());
        }


        public String gNormStr() {
                return normalize(gNorm());
        }

        public String gesseStr() {
                String bs = b > 0 ? " + " + b : " - " + (-b);
                String ds = d > 0 ? " + " + d : " - " + (-d);
                return "#{1.125\u00b7sin 1.5x_{1}+0.125\u00b7sin 0.5x_{1}}{0}{0}{1.125\u00b7sin 1.5x_{2}+0.125\u00b7sin 0.5x_{2}}";
        }

        public String hStr() {
                double[][] matrix = h();
                return "#{" + normalize(matrix[0][0]) + "}{" +
                normalize(matrix[0][1]) + "}{" + normalize(matrix[1][0]) + "}{" +
                normalize(matrix[1][1]) + "}";
        }


        public String h_1Str() {
                double[][] matrix = h_1();
                return "#{" + normalize(matrix[0][0]) + "}{" +
                normalize(matrix[0][1]) + "}{" + normalize(matrix[1][0]) + "}{" +
                normalize(matrix[1][1]) + "}";
        }





        public String d1Str() {
                return normalize(d1());
        }
        public String d2Str() {
                return normalize(d2());
        }


        public String x1NewStr() {
                return normalize(x1New());
        }
        public String x2NewStr() {
                return normalize(x2New());
        }



        public String x1Str() {
                return normalize(x1);
        }
        public String x2Str() {
                return normalize(x2);
        }


        public String eps1Str() {
                return normalize(eps1);
        }
        public String eps2Str() {
                return normalize(eps2);
        }
        public String dxNormStr() {
                return normalize(dxNorm());
        }
        public String dFuncNormStr() {
                return normalize(dFuncNorm());
        }
        public String funcStr() {
                return normalize(func());
        }
       public String funcStr(double x1, double x2) {
                return normalize(func(x1,x2));
        }


}
